// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class CalendarConfig;
class RGB;
class SpecialDay;

enum OutputType {
  SVG = 0,
  PDF = 1,
  PNG = 2
};
bool OutputType_IsValid(int value);
const OutputType OutputType_MIN = SVG;
const OutputType OutputType_MAX = PNG;
const int OutputType_ARRAYSIZE = OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputType_descriptor();
inline const ::std::string& OutputType_Name(OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputType_descriptor(), value);
}
inline bool OutputType_Parse(
    const ::std::string& name, OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputType>(
    OutputType_descriptor(), name, value);
}
// ===================================================================

class CalendarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.CalendarConfig) */ {
 public:
  CalendarConfig();
  virtual ~CalendarConfig();

  CalendarConfig(const CalendarConfig& from);

  inline CalendarConfig& operator=(const CalendarConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarConfig& default_instance();

  void Swap(CalendarConfig* other);

  // implements Message ----------------------------------------------

  inline CalendarConfig* New() const { return New(NULL); }

  CalendarConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarConfig& from);
  void MergeFrom(const CalendarConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_years = 1 [default = 30];
  bool has_num_years() const;
  void clear_num_years();
  static const int kNumYearsFieldNumber = 1;
  ::google::protobuf::int32 num_years() const;
  void set_num_years(::google::protobuf::int32 value);

  // optional int32 first_month = 2 [default = 1];
  bool has_first_month() const;
  void clear_first_month();
  static const int kFirstMonthFieldNumber = 2;
  ::google::protobuf::int32 first_month() const;
  void set_first_month(::google::protobuf::int32 value);

  // optional int32 num_months = 3 [default = 12];
  bool has_num_months() const;
  void clear_num_months();
  static const int kNumMonthsFieldNumber = 3;
  ::google::protobuf::int32 num_months() const;
  void set_num_months(::google::protobuf::int32 value);

  // repeated .config.SpecialDay special_day = 4;
  int special_day_size() const;
  void clear_special_day();
  static const int kSpecialDayFieldNumber = 4;
  const ::config::SpecialDay& special_day(int index) const;
  ::config::SpecialDay* mutable_special_day(int index);
  ::config::SpecialDay* add_special_day();
  ::google::protobuf::RepeatedPtrField< ::config::SpecialDay >*
      mutable_special_day();
  const ::google::protobuf::RepeatedPtrField< ::config::SpecialDay >&
      special_day() const;

  // optional double cell_size = 5;
  bool has_cell_size() const;
  void clear_cell_size();
  static const int kCellSizeFieldNumber = 5;
  double cell_size() const;
  void set_cell_size(double value);

  // optional double cell_margin = 6;
  bool has_cell_margin() const;
  void clear_cell_margin();
  static const int kCellMarginFieldNumber = 6;
  double cell_margin() const;
  void set_cell_margin(double value);

  // optional double font_size = 7;
  bool has_font_size() const;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 7;
  double font_size() const;
  void set_font_size(double value);

  // optional double bigger_font_size = 8;
  bool has_bigger_font_size() const;
  void clear_bigger_font_size();
  static const int kBiggerFontSizeFieldNumber = 8;
  double bigger_font_size() const;
  void set_bigger_font_size(double value);

  // optional double line_width = 9;
  bool has_line_width() const;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 9;
  double line_width() const;
  void set_line_width(double value);

  // optional double month_label_height = 10;
  bool has_month_label_height() const;
  void clear_month_label_height();
  static const int kMonthLabelHeightFieldNumber = 10;
  double month_label_height() const;
  void set_month_label_height(double value);

  // optional double year_label_width = 11;
  bool has_year_label_width() const;
  void clear_year_label_width();
  static const int kYearLabelWidthFieldNumber = 11;
  double year_label_width() const;
  void set_year_label_width(double value);

  // optional .config.RGB rgb_header = 12;
  bool has_rgb_header() const;
  void clear_rgb_header();
  static const int kRgbHeaderFieldNumber = 12;
  const ::config::RGB& rgb_header() const;
  ::config::RGB* mutable_rgb_header();
  ::config::RGB* release_rgb_header();
  void set_allocated_rgb_header(::config::RGB* rgb_header);

  // optional .config.RGB rgb_header_sunday = 13;
  bool has_rgb_header_sunday() const;
  void clear_rgb_header_sunday();
  static const int kRgbHeaderSundayFieldNumber = 13;
  const ::config::RGB& rgb_header_sunday() const;
  ::config::RGB* mutable_rgb_header_sunday();
  ::config::RGB* release_rgb_header_sunday();
  void set_allocated_rgb_header_sunday(::config::RGB* rgb_header_sunday);

  // optional .config.RGB rgb_month_line = 14;
  bool has_rgb_month_line() const;
  void clear_rgb_month_line();
  static const int kRgbMonthLineFieldNumber = 14;
  const ::config::RGB& rgb_month_line() const;
  ::config::RGB* mutable_rgb_month_line();
  ::config::RGB* release_rgb_month_line();
  void set_allocated_rgb_month_line(::config::RGB* rgb_month_line);

  // optional .config.RGB rgb_holiday = 15;
  bool has_rgb_holiday() const;
  void clear_rgb_holiday();
  static const int kRgbHolidayFieldNumber = 15;
  const ::config::RGB& rgb_holiday() const;
  ::config::RGB* mutable_rgb_holiday();
  ::config::RGB* release_rgb_holiday();
  void set_allocated_rgb_holiday(::config::RGB* rgb_holiday);

  // optional string bottom_left_label = 16;
  bool has_bottom_left_label() const;
  void clear_bottom_left_label();
  static const int kBottomLeftLabelFieldNumber = 16;
  const ::std::string& bottom_left_label() const;
  void set_bottom_left_label(const ::std::string& value);
  void set_bottom_left_label(const char* value);
  void set_bottom_left_label(const char* value, size_t size);
  ::std::string* mutable_bottom_left_label();
  ::std::string* release_bottom_left_label();
  void set_allocated_bottom_left_label(::std::string* bottom_left_label);

  // optional string bottom_right_label = 17;
  bool has_bottom_right_label() const;
  void clear_bottom_right_label();
  static const int kBottomRightLabelFieldNumber = 17;
  const ::std::string& bottom_right_label() const;
  void set_bottom_right_label(const ::std::string& value);
  void set_bottom_right_label(const char* value);
  void set_bottom_right_label(const char* value, size_t size);
  ::std::string* mutable_bottom_right_label();
  ::std::string* release_bottom_right_label();
  void set_allocated_bottom_right_label(::std::string* bottom_right_label);

  // optional string header_font_family = 18;
  bool has_header_font_family() const;
  void clear_header_font_family();
  static const int kHeaderFontFamilyFieldNumber = 18;
  const ::std::string& header_font_family() const;
  void set_header_font_family(const ::std::string& value);
  void set_header_font_family(const char* value);
  void set_header_font_family(const char* value, size_t size);
  ::std::string* mutable_header_font_family();
  ::std::string* release_header_font_family();
  void set_allocated_header_font_family(::std::string* header_font_family);

  // optional string number_font_family = 19;
  bool has_number_font_family() const;
  void clear_number_font_family();
  static const int kNumberFontFamilyFieldNumber = 19;
  const ::std::string& number_font_family() const;
  void set_number_font_family(const ::std::string& value);
  void set_number_font_family(const char* value);
  void set_number_font_family(const char* value, size_t size);
  ::std::string* mutable_number_font_family();
  ::std::string* release_number_font_family();
  void set_allocated_number_font_family(::std::string* number_font_family);

  // optional string quote_font_family = 20;
  bool has_quote_font_family() const;
  void clear_quote_font_family();
  static const int kQuoteFontFamilyFieldNumber = 20;
  const ::std::string& quote_font_family() const;
  void set_quote_font_family(const ::std::string& value);
  void set_quote_font_family(const char* value);
  void set_quote_font_family(const char* value, size_t size);
  ::std::string* mutable_quote_font_family();
  ::std::string* release_quote_font_family();
  void set_allocated_quote_font_family(::std::string* quote_font_family);

  // optional bool dotted_line = 21 [default = false];
  bool has_dotted_line() const;
  void clear_dotted_line();
  static const int kDottedLineFieldNumber = 21;
  bool dotted_line() const;
  void set_dotted_line(bool value);

  // optional double vertical_dotted_line_x = 22;
  bool has_vertical_dotted_line_x() const;
  void clear_vertical_dotted_line_x();
  static const int kVerticalDottedLineXFieldNumber = 22;
  double vertical_dotted_line_x() const;
  void set_vertical_dotted_line_x(double value);

  // optional .config.OutputType output_type = 23 [default = SVG];
  bool has_output_type() const;
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 23;
  ::config::OutputType output_type() const;
  void set_output_type(::config::OutputType value);

  // @@protoc_insertion_point(class_scope:config.CalendarConfig)
 private:
  inline void set_has_num_years();
  inline void clear_has_num_years();
  inline void set_has_first_month();
  inline void clear_has_first_month();
  inline void set_has_num_months();
  inline void clear_has_num_months();
  inline void set_has_cell_size();
  inline void clear_has_cell_size();
  inline void set_has_cell_margin();
  inline void clear_has_cell_margin();
  inline void set_has_font_size();
  inline void clear_has_font_size();
  inline void set_has_bigger_font_size();
  inline void clear_has_bigger_font_size();
  inline void set_has_line_width();
  inline void clear_has_line_width();
  inline void set_has_month_label_height();
  inline void clear_has_month_label_height();
  inline void set_has_year_label_width();
  inline void clear_has_year_label_width();
  inline void set_has_rgb_header();
  inline void clear_has_rgb_header();
  inline void set_has_rgb_header_sunday();
  inline void clear_has_rgb_header_sunday();
  inline void set_has_rgb_month_line();
  inline void clear_has_rgb_month_line();
  inline void set_has_rgb_holiday();
  inline void clear_has_rgb_holiday();
  inline void set_has_bottom_left_label();
  inline void clear_has_bottom_left_label();
  inline void set_has_bottom_right_label();
  inline void clear_has_bottom_right_label();
  inline void set_has_header_font_family();
  inline void clear_has_header_font_family();
  inline void set_has_number_font_family();
  inline void clear_has_number_font_family();
  inline void set_has_quote_font_family();
  inline void clear_has_quote_font_family();
  inline void set_has_dotted_line();
  inline void clear_has_dotted_line();
  inline void set_has_vertical_dotted_line_x();
  inline void clear_has_vertical_dotted_line_x();
  inline void set_has_output_type();
  inline void clear_has_output_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_years_;
  ::google::protobuf::int32 first_month_;
  ::google::protobuf::RepeatedPtrField< ::config::SpecialDay > special_day_;
  double cell_size_;
  double cell_margin_;
  double font_size_;
  double bigger_font_size_;
  double line_width_;
  double month_label_height_;
  double year_label_width_;
  ::config::RGB* rgb_header_;
  ::google::protobuf::int32 num_months_;
  bool dotted_line_;
  ::config::RGB* rgb_header_sunday_;
  ::config::RGB* rgb_month_line_;
  ::config::RGB* rgb_holiday_;
  ::google::protobuf::internal::ArenaStringPtr bottom_left_label_;
  ::google::protobuf::internal::ArenaStringPtr bottom_right_label_;
  ::google::protobuf::internal::ArenaStringPtr header_font_family_;
  ::google::protobuf::internal::ArenaStringPtr number_font_family_;
  ::google::protobuf::internal::ArenaStringPtr quote_font_family_;
  double vertical_dotted_line_x_;
  int output_type_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static CalendarConfig* default_instance_;
};
// -------------------------------------------------------------------

class SpecialDay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.SpecialDay) */ {
 public:
  SpecialDay();
  virtual ~SpecialDay();

  SpecialDay(const SpecialDay& from);

  inline SpecialDay& operator=(const SpecialDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialDay& default_instance();

  void Swap(SpecialDay* other);

  // implements Message ----------------------------------------------

  inline SpecialDay* New() const { return New(NULL); }

  SpecialDay* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialDay& from);
  void MergeFrom(const SpecialDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpecialDay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 month = 1;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 1;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // required int32 day = 2;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 2;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // optional string svg = 3;
  bool has_svg() const;
  void clear_svg();
  static const int kSvgFieldNumber = 3;
  const ::std::string& svg() const;
  void set_svg(const ::std::string& value);
  void set_svg(const char* value);
  void set_svg(const char* value, size_t size);
  ::std::string* mutable_svg();
  ::std::string* release_svg();
  void set_allocated_svg(::std::string* svg);

  // optional int32 first_year = 4;
  bool has_first_year() const;
  void clear_first_year();
  static const int kFirstYearFieldNumber = 4;
  ::google::protobuf::int32 first_year() const;
  void set_first_year(::google::protobuf::int32 value);

  // optional int32 year = 5;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 5;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional .config.RGB rgb = 6;
  bool has_rgb() const;
  void clear_rgb();
  static const int kRgbFieldNumber = 6;
  const ::config::RGB& rgb() const;
  ::config::RGB* mutable_rgb();
  ::config::RGB* release_rgb();
  void set_allocated_rgb(::config::RGB* rgb);

  // @@protoc_insertion_point(class_scope:config.SpecialDay)
 private:
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_svg();
  inline void clear_has_svg();
  inline void set_has_first_year();
  inline void clear_has_first_year();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_rgb();
  inline void clear_has_rgb();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::internal::ArenaStringPtr svg_;
  ::google::protobuf::int32 first_year_;
  ::google::protobuf::int32 year_;
  ::config::RGB* rgb_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static SpecialDay* default_instance_;
};
// -------------------------------------------------------------------

class RGB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.RGB) */ {
 public:
  RGB();
  virtual ~RGB();

  RGB(const RGB& from);

  inline RGB& operator=(const RGB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGB& default_instance();

  void Swap(RGB* other);

  // implements Message ----------------------------------------------

  inline RGB* New() const { return New(NULL); }

  RGB* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGB& from);
  void MergeFrom(const RGB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RGB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 red = 1;
  bool has_red() const;
  void clear_red();
  static const int kRedFieldNumber = 1;
  ::google::protobuf::int32 red() const;
  void set_red(::google::protobuf::int32 value);

  // required int32 green = 2;
  bool has_green() const;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  ::google::protobuf::int32 green() const;
  void set_green(::google::protobuf::int32 value);

  // required int32 blue = 3;
  bool has_blue() const;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  ::google::protobuf::int32 blue() const;
  void set_blue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.RGB)
 private:
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 red_;
  ::google::protobuf::int32 green_;
  ::google::protobuf::int32 blue_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static RGB* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarConfig

// optional int32 num_years = 1 [default = 30];
inline bool CalendarConfig::has_num_years() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalendarConfig::set_has_num_years() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalendarConfig::clear_has_num_years() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalendarConfig::clear_num_years() {
  num_years_ = 30;
  clear_has_num_years();
}
inline ::google::protobuf::int32 CalendarConfig::num_years() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.num_years)
  return num_years_;
}
inline void CalendarConfig::set_num_years(::google::protobuf::int32 value) {
  set_has_num_years();
  num_years_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.num_years)
}

// optional int32 first_month = 2 [default = 1];
inline bool CalendarConfig::has_first_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalendarConfig::set_has_first_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalendarConfig::clear_has_first_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalendarConfig::clear_first_month() {
  first_month_ = 1;
  clear_has_first_month();
}
inline ::google::protobuf::int32 CalendarConfig::first_month() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.first_month)
  return first_month_;
}
inline void CalendarConfig::set_first_month(::google::protobuf::int32 value) {
  set_has_first_month();
  first_month_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.first_month)
}

// optional int32 num_months = 3 [default = 12];
inline bool CalendarConfig::has_num_months() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalendarConfig::set_has_num_months() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalendarConfig::clear_has_num_months() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalendarConfig::clear_num_months() {
  num_months_ = 12;
  clear_has_num_months();
}
inline ::google::protobuf::int32 CalendarConfig::num_months() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.num_months)
  return num_months_;
}
inline void CalendarConfig::set_num_months(::google::protobuf::int32 value) {
  set_has_num_months();
  num_months_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.num_months)
}

// repeated .config.SpecialDay special_day = 4;
inline int CalendarConfig::special_day_size() const {
  return special_day_.size();
}
inline void CalendarConfig::clear_special_day() {
  special_day_.Clear();
}
inline const ::config::SpecialDay& CalendarConfig::special_day(int index) const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.special_day)
  return special_day_.Get(index);
}
inline ::config::SpecialDay* CalendarConfig::mutable_special_day(int index) {
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.special_day)
  return special_day_.Mutable(index);
}
inline ::config::SpecialDay* CalendarConfig::add_special_day() {
  // @@protoc_insertion_point(field_add:config.CalendarConfig.special_day)
  return special_day_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::SpecialDay >*
CalendarConfig::mutable_special_day() {
  // @@protoc_insertion_point(field_mutable_list:config.CalendarConfig.special_day)
  return &special_day_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::SpecialDay >&
CalendarConfig::special_day() const {
  // @@protoc_insertion_point(field_list:config.CalendarConfig.special_day)
  return special_day_;
}

// optional double cell_size = 5;
inline bool CalendarConfig::has_cell_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CalendarConfig::set_has_cell_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CalendarConfig::clear_has_cell_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CalendarConfig::clear_cell_size() {
  cell_size_ = 0;
  clear_has_cell_size();
}
inline double CalendarConfig::cell_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_size)
  return cell_size_;
}
inline void CalendarConfig::set_cell_size(double value) {
  set_has_cell_size();
  cell_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_size)
}

// optional double cell_margin = 6;
inline bool CalendarConfig::has_cell_margin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CalendarConfig::set_has_cell_margin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CalendarConfig::clear_has_cell_margin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CalendarConfig::clear_cell_margin() {
  cell_margin_ = 0;
  clear_has_cell_margin();
}
inline double CalendarConfig::cell_margin() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_margin)
  return cell_margin_;
}
inline void CalendarConfig::set_cell_margin(double value) {
  set_has_cell_margin();
  cell_margin_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_margin)
}

// optional double font_size = 7;
inline bool CalendarConfig::has_font_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CalendarConfig::set_has_font_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CalendarConfig::clear_has_font_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CalendarConfig::clear_font_size() {
  font_size_ = 0;
  clear_has_font_size();
}
inline double CalendarConfig::font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.font_size)
  return font_size_;
}
inline void CalendarConfig::set_font_size(double value) {
  set_has_font_size();
  font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.font_size)
}

// optional double bigger_font_size = 8;
inline bool CalendarConfig::has_bigger_font_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CalendarConfig::set_has_bigger_font_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CalendarConfig::clear_has_bigger_font_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CalendarConfig::clear_bigger_font_size() {
  bigger_font_size_ = 0;
  clear_has_bigger_font_size();
}
inline double CalendarConfig::bigger_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bigger_font_size)
  return bigger_font_size_;
}
inline void CalendarConfig::set_bigger_font_size(double value) {
  set_has_bigger_font_size();
  bigger_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bigger_font_size)
}

// optional double line_width = 9;
inline bool CalendarConfig::has_line_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CalendarConfig::set_has_line_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CalendarConfig::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CalendarConfig::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline double CalendarConfig::line_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.line_width)
  return line_width_;
}
inline void CalendarConfig::set_line_width(double value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.line_width)
}

// optional double month_label_height = 10;
inline bool CalendarConfig::has_month_label_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CalendarConfig::set_has_month_label_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CalendarConfig::clear_has_month_label_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CalendarConfig::clear_month_label_height() {
  month_label_height_ = 0;
  clear_has_month_label_height();
}
inline double CalendarConfig::month_label_height() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month_label_height)
  return month_label_height_;
}
inline void CalendarConfig::set_month_label_height(double value) {
  set_has_month_label_height();
  month_label_height_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month_label_height)
}

// optional double year_label_width = 11;
inline bool CalendarConfig::has_year_label_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CalendarConfig::set_has_year_label_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CalendarConfig::clear_has_year_label_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CalendarConfig::clear_year_label_width() {
  year_label_width_ = 0;
  clear_has_year_label_width();
}
inline double CalendarConfig::year_label_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.year_label_width)
  return year_label_width_;
}
inline void CalendarConfig::set_year_label_width(double value) {
  set_has_year_label_width();
  year_label_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.year_label_width)
}

// optional .config.RGB rgb_header = 12;
inline bool CalendarConfig::has_rgb_header() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CalendarConfig::set_has_rgb_header() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CalendarConfig::clear_has_rgb_header() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CalendarConfig::clear_rgb_header() {
  if (rgb_header_ != NULL) rgb_header_->::config::RGB::Clear();
  clear_has_rgb_header();
}
inline const ::config::RGB& CalendarConfig::rgb_header() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_header)
  return rgb_header_ != NULL ? *rgb_header_ : *default_instance_->rgb_header_;
}
inline ::config::RGB* CalendarConfig::mutable_rgb_header() {
  set_has_rgb_header();
  if (rgb_header_ == NULL) {
    rgb_header_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_header)
  return rgb_header_;
}
inline ::config::RGB* CalendarConfig::release_rgb_header() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_header)
  clear_has_rgb_header();
  ::config::RGB* temp = rgb_header_;
  rgb_header_ = NULL;
  return temp;
}
inline void CalendarConfig::set_allocated_rgb_header(::config::RGB* rgb_header) {
  delete rgb_header_;
  rgb_header_ = rgb_header;
  if (rgb_header) {
    set_has_rgb_header();
  } else {
    clear_has_rgb_header();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_header)
}

// optional .config.RGB rgb_header_sunday = 13;
inline bool CalendarConfig::has_rgb_header_sunday() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CalendarConfig::set_has_rgb_header_sunday() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CalendarConfig::clear_has_rgb_header_sunday() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CalendarConfig::clear_rgb_header_sunday() {
  if (rgb_header_sunday_ != NULL) rgb_header_sunday_->::config::RGB::Clear();
  clear_has_rgb_header_sunday();
}
inline const ::config::RGB& CalendarConfig::rgb_header_sunday() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_header_sunday)
  return rgb_header_sunday_ != NULL ? *rgb_header_sunday_ : *default_instance_->rgb_header_sunday_;
}
inline ::config::RGB* CalendarConfig::mutable_rgb_header_sunday() {
  set_has_rgb_header_sunday();
  if (rgb_header_sunday_ == NULL) {
    rgb_header_sunday_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_header_sunday)
  return rgb_header_sunday_;
}
inline ::config::RGB* CalendarConfig::release_rgb_header_sunday() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_header_sunday)
  clear_has_rgb_header_sunday();
  ::config::RGB* temp = rgb_header_sunday_;
  rgb_header_sunday_ = NULL;
  return temp;
}
inline void CalendarConfig::set_allocated_rgb_header_sunday(::config::RGB* rgb_header_sunday) {
  delete rgb_header_sunday_;
  rgb_header_sunday_ = rgb_header_sunday;
  if (rgb_header_sunday) {
    set_has_rgb_header_sunday();
  } else {
    clear_has_rgb_header_sunday();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_header_sunday)
}

// optional .config.RGB rgb_month_line = 14;
inline bool CalendarConfig::has_rgb_month_line() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CalendarConfig::set_has_rgb_month_line() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CalendarConfig::clear_has_rgb_month_line() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CalendarConfig::clear_rgb_month_line() {
  if (rgb_month_line_ != NULL) rgb_month_line_->::config::RGB::Clear();
  clear_has_rgb_month_line();
}
inline const ::config::RGB& CalendarConfig::rgb_month_line() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_month_line)
  return rgb_month_line_ != NULL ? *rgb_month_line_ : *default_instance_->rgb_month_line_;
}
inline ::config::RGB* CalendarConfig::mutable_rgb_month_line() {
  set_has_rgb_month_line();
  if (rgb_month_line_ == NULL) {
    rgb_month_line_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_month_line)
  return rgb_month_line_;
}
inline ::config::RGB* CalendarConfig::release_rgb_month_line() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_month_line)
  clear_has_rgb_month_line();
  ::config::RGB* temp = rgb_month_line_;
  rgb_month_line_ = NULL;
  return temp;
}
inline void CalendarConfig::set_allocated_rgb_month_line(::config::RGB* rgb_month_line) {
  delete rgb_month_line_;
  rgb_month_line_ = rgb_month_line;
  if (rgb_month_line) {
    set_has_rgb_month_line();
  } else {
    clear_has_rgb_month_line();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_month_line)
}

// optional .config.RGB rgb_holiday = 15;
inline bool CalendarConfig::has_rgb_holiday() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CalendarConfig::set_has_rgb_holiday() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CalendarConfig::clear_has_rgb_holiday() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CalendarConfig::clear_rgb_holiday() {
  if (rgb_holiday_ != NULL) rgb_holiday_->::config::RGB::Clear();
  clear_has_rgb_holiday();
}
inline const ::config::RGB& CalendarConfig::rgb_holiday() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_holiday)
  return rgb_holiday_ != NULL ? *rgb_holiday_ : *default_instance_->rgb_holiday_;
}
inline ::config::RGB* CalendarConfig::mutable_rgb_holiday() {
  set_has_rgb_holiday();
  if (rgb_holiday_ == NULL) {
    rgb_holiday_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_holiday)
  return rgb_holiday_;
}
inline ::config::RGB* CalendarConfig::release_rgb_holiday() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_holiday)
  clear_has_rgb_holiday();
  ::config::RGB* temp = rgb_holiday_;
  rgb_holiday_ = NULL;
  return temp;
}
inline void CalendarConfig::set_allocated_rgb_holiday(::config::RGB* rgb_holiday) {
  delete rgb_holiday_;
  rgb_holiday_ = rgb_holiday;
  if (rgb_holiday) {
    set_has_rgb_holiday();
  } else {
    clear_has_rgb_holiday();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_holiday)
}

// optional string bottom_left_label = 16;
inline bool CalendarConfig::has_bottom_left_label() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CalendarConfig::set_has_bottom_left_label() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CalendarConfig::clear_has_bottom_left_label() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CalendarConfig::clear_bottom_left_label() {
  bottom_left_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bottom_left_label();
}
inline const ::std::string& CalendarConfig::bottom_left_label() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bottom_left_label)
  return bottom_left_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_bottom_left_label(const ::std::string& value) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bottom_left_label)
}
inline void CalendarConfig::set_bottom_left_label(const char* value) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.bottom_left_label)
}
inline void CalendarConfig::set_bottom_left_label(const char* value, size_t size) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.bottom_left_label)
}
inline ::std::string* CalendarConfig::mutable_bottom_left_label() {
  set_has_bottom_left_label();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.bottom_left_label)
  return bottom_left_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_bottom_left_label() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.bottom_left_label)
  clear_has_bottom_left_label();
  return bottom_left_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_bottom_left_label(::std::string* bottom_left_label) {
  if (bottom_left_label != NULL) {
    set_has_bottom_left_label();
  } else {
    clear_has_bottom_left_label();
  }
  bottom_left_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottom_left_label);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.bottom_left_label)
}

// optional string bottom_right_label = 17;
inline bool CalendarConfig::has_bottom_right_label() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CalendarConfig::set_has_bottom_right_label() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CalendarConfig::clear_has_bottom_right_label() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CalendarConfig::clear_bottom_right_label() {
  bottom_right_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bottom_right_label();
}
inline const ::std::string& CalendarConfig::bottom_right_label() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bottom_right_label)
  return bottom_right_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_bottom_right_label(const ::std::string& value) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bottom_right_label)
}
inline void CalendarConfig::set_bottom_right_label(const char* value) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.bottom_right_label)
}
inline void CalendarConfig::set_bottom_right_label(const char* value, size_t size) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.bottom_right_label)
}
inline ::std::string* CalendarConfig::mutable_bottom_right_label() {
  set_has_bottom_right_label();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.bottom_right_label)
  return bottom_right_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_bottom_right_label() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.bottom_right_label)
  clear_has_bottom_right_label();
  return bottom_right_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_bottom_right_label(::std::string* bottom_right_label) {
  if (bottom_right_label != NULL) {
    set_has_bottom_right_label();
  } else {
    clear_has_bottom_right_label();
  }
  bottom_right_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottom_right_label);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.bottom_right_label)
}

// optional string header_font_family = 18;
inline bool CalendarConfig::has_header_font_family() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CalendarConfig::set_has_header_font_family() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CalendarConfig::clear_has_header_font_family() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CalendarConfig::clear_header_font_family() {
  header_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_font_family();
}
inline const ::std::string& CalendarConfig::header_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.header_font_family)
  return header_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_header_font_family(const ::std::string& value) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.header_font_family)
}
inline void CalendarConfig::set_header_font_family(const char* value) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.header_font_family)
}
inline void CalendarConfig::set_header_font_family(const char* value, size_t size) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.header_font_family)
}
inline ::std::string* CalendarConfig::mutable_header_font_family() {
  set_has_header_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.header_font_family)
  return header_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_header_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.header_font_family)
  clear_has_header_font_family();
  return header_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_header_font_family(::std::string* header_font_family) {
  if (header_font_family != NULL) {
    set_has_header_font_family();
  } else {
    clear_has_header_font_family();
  }
  header_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.header_font_family)
}

// optional string number_font_family = 19;
inline bool CalendarConfig::has_number_font_family() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CalendarConfig::set_has_number_font_family() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CalendarConfig::clear_has_number_font_family() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CalendarConfig::clear_number_font_family() {
  number_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number_font_family();
}
inline const ::std::string& CalendarConfig::number_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.number_font_family)
  return number_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_number_font_family(const ::std::string& value) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.number_font_family)
}
inline void CalendarConfig::set_number_font_family(const char* value) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.number_font_family)
}
inline void CalendarConfig::set_number_font_family(const char* value, size_t size) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.number_font_family)
}
inline ::std::string* CalendarConfig::mutable_number_font_family() {
  set_has_number_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.number_font_family)
  return number_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_number_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.number_font_family)
  clear_has_number_font_family();
  return number_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_number_font_family(::std::string* number_font_family) {
  if (number_font_family != NULL) {
    set_has_number_font_family();
  } else {
    clear_has_number_font_family();
  }
  number_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.number_font_family)
}

// optional string quote_font_family = 20;
inline bool CalendarConfig::has_quote_font_family() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CalendarConfig::set_has_quote_font_family() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CalendarConfig::clear_has_quote_font_family() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CalendarConfig::clear_quote_font_family() {
  quote_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quote_font_family();
}
inline const ::std::string& CalendarConfig::quote_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.quote_font_family)
  return quote_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_quote_font_family(const ::std::string& value) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.quote_font_family)
}
inline void CalendarConfig::set_quote_font_family(const char* value) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.quote_font_family)
}
inline void CalendarConfig::set_quote_font_family(const char* value, size_t size) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.quote_font_family)
}
inline ::std::string* CalendarConfig::mutable_quote_font_family() {
  set_has_quote_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.quote_font_family)
  return quote_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarConfig::release_quote_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.quote_font_family)
  clear_has_quote_font_family();
  return quote_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarConfig::set_allocated_quote_font_family(::std::string* quote_font_family) {
  if (quote_font_family != NULL) {
    set_has_quote_font_family();
  } else {
    clear_has_quote_font_family();
  }
  quote_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.quote_font_family)
}

// optional bool dotted_line = 21 [default = false];
inline bool CalendarConfig::has_dotted_line() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CalendarConfig::set_has_dotted_line() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CalendarConfig::clear_has_dotted_line() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CalendarConfig::clear_dotted_line() {
  dotted_line_ = false;
  clear_has_dotted_line();
}
inline bool CalendarConfig::dotted_line() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.dotted_line)
  return dotted_line_;
}
inline void CalendarConfig::set_dotted_line(bool value) {
  set_has_dotted_line();
  dotted_line_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.dotted_line)
}

// optional double vertical_dotted_line_x = 22;
inline bool CalendarConfig::has_vertical_dotted_line_x() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CalendarConfig::set_has_vertical_dotted_line_x() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CalendarConfig::clear_has_vertical_dotted_line_x() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CalendarConfig::clear_vertical_dotted_line_x() {
  vertical_dotted_line_x_ = 0;
  clear_has_vertical_dotted_line_x();
}
inline double CalendarConfig::vertical_dotted_line_x() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.vertical_dotted_line_x)
  return vertical_dotted_line_x_;
}
inline void CalendarConfig::set_vertical_dotted_line_x(double value) {
  set_has_vertical_dotted_line_x();
  vertical_dotted_line_x_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.vertical_dotted_line_x)
}

// optional .config.OutputType output_type = 23 [default = SVG];
inline bool CalendarConfig::has_output_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CalendarConfig::set_has_output_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CalendarConfig::clear_has_output_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CalendarConfig::clear_output_type() {
  output_type_ = 0;
  clear_has_output_type();
}
inline ::config::OutputType CalendarConfig::output_type() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.output_type)
  return static_cast< ::config::OutputType >(output_type_);
}
inline void CalendarConfig::set_output_type(::config::OutputType value) {
  assert(::config::OutputType_IsValid(value));
  set_has_output_type();
  output_type_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.output_type)
}

// -------------------------------------------------------------------

// SpecialDay

// required int32 month = 1;
inline bool SpecialDay::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialDay::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialDay::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialDay::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 SpecialDay::month() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.month)
  return month_;
}
inline void SpecialDay::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.month)
}

// required int32 day = 2;
inline bool SpecialDay::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialDay::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecialDay::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecialDay::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 SpecialDay::day() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.day)
  return day_;
}
inline void SpecialDay::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.day)
}

// optional string svg = 3;
inline bool SpecialDay::has_svg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecialDay::set_has_svg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecialDay::clear_has_svg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecialDay::clear_svg() {
  svg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svg();
}
inline const ::std::string& SpecialDay::svg() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.svg)
  return svg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpecialDay::set_svg(const ::std::string& value) {
  set_has_svg();
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SpecialDay.svg)
}
inline void SpecialDay::set_svg(const char* value) {
  set_has_svg();
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SpecialDay.svg)
}
inline void SpecialDay::set_svg(const char* value, size_t size) {
  set_has_svg();
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SpecialDay.svg)
}
inline ::std::string* SpecialDay::mutable_svg() {
  set_has_svg();
  // @@protoc_insertion_point(field_mutable:config.SpecialDay.svg)
  return svg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpecialDay::release_svg() {
  // @@protoc_insertion_point(field_release:config.SpecialDay.svg)
  clear_has_svg();
  return svg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpecialDay::set_allocated_svg(::std::string* svg) {
  if (svg != NULL) {
    set_has_svg();
  } else {
    clear_has_svg();
  }
  svg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svg);
  // @@protoc_insertion_point(field_set_allocated:config.SpecialDay.svg)
}

// optional int32 first_year = 4;
inline bool SpecialDay::has_first_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecialDay::set_has_first_year() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecialDay::clear_has_first_year() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecialDay::clear_first_year() {
  first_year_ = 0;
  clear_has_first_year();
}
inline ::google::protobuf::int32 SpecialDay::first_year() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.first_year)
  return first_year_;
}
inline void SpecialDay::set_first_year(::google::protobuf::int32 value) {
  set_has_first_year();
  first_year_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.first_year)
}

// optional int32 year = 5;
inline bool SpecialDay::has_year() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecialDay::set_has_year() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecialDay::clear_has_year() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecialDay::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 SpecialDay::year() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.year)
  return year_;
}
inline void SpecialDay::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.year)
}

// optional .config.RGB rgb = 6;
inline bool SpecialDay::has_rgb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpecialDay::set_has_rgb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpecialDay::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpecialDay::clear_rgb() {
  if (rgb_ != NULL) rgb_->::config::RGB::Clear();
  clear_has_rgb();
}
inline const ::config::RGB& SpecialDay::rgb() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.rgb)
  return rgb_ != NULL ? *rgb_ : *default_instance_->rgb_;
}
inline ::config::RGB* SpecialDay::mutable_rgb() {
  set_has_rgb();
  if (rgb_ == NULL) {
    rgb_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.SpecialDay.rgb)
  return rgb_;
}
inline ::config::RGB* SpecialDay::release_rgb() {
  // @@protoc_insertion_point(field_release:config.SpecialDay.rgb)
  clear_has_rgb();
  ::config::RGB* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
inline void SpecialDay::set_allocated_rgb(::config::RGB* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    set_has_rgb();
  } else {
    clear_has_rgb();
  }
  // @@protoc_insertion_point(field_set_allocated:config.SpecialDay.rgb)
}

// -------------------------------------------------------------------

// RGB

// required int32 red = 1;
inline bool RGB::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGB::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGB::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGB::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::google::protobuf::int32 RGB::red() const {
  // @@protoc_insertion_point(field_get:config.RGB.red)
  return red_;
}
inline void RGB::set_red(::google::protobuf::int32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.red)
}

// required int32 green = 2;
inline bool RGB::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGB::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGB::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGB::clear_green() {
  green_ = 0;
  clear_has_green();
}
inline ::google::protobuf::int32 RGB::green() const {
  // @@protoc_insertion_point(field_get:config.RGB.green)
  return green_;
}
inline void RGB::set_green(::google::protobuf::int32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.green)
}

// required int32 blue = 3;
inline bool RGB::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGB::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGB::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGB::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
inline ::google::protobuf::int32 RGB::blue() const {
  // @@protoc_insertion_point(field_get:config.RGB.blue)
  return blue_;
}
inline void RGB::set_blue(::google::protobuf::int32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.blue)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::OutputType>() {
  return ::config::OutputType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
