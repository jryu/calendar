// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config {

namespace {

const ::google::protobuf::Descriptor* CalendarConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  CalendarConfig_descriptor_ = file->message_type(0);
  static const int CalendarConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, num_years_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, special_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, cell_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, cell_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, bigger_font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, month_label_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, year_label_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, rgb_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, rgb_header_sunday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, rgb_month_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, rgb_holiday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, bottom_left_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, bottom_right_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, header_font_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, number_font_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, quote_font_family_),
  };
  CalendarConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarConfig_descriptor_,
      CalendarConfig::default_instance_,
      CalendarConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarConfig, _internal_metadata_),
      -1);
  SpecialDay_descriptor_ = file->message_type(1);
  static const int SpecialDay_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, first_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, rgb_),
  };
  SpecialDay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpecialDay_descriptor_,
      SpecialDay::default_instance_,
      SpecialDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpecialDay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialDay, _internal_metadata_),
      -1);
  RGB_descriptor_ = file->message_type(2);
  static const int RGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, blue_),
  };
  RGB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RGB_descriptor_,
      RGB::default_instance_,
      RGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _has_bits_[0]),
      -1,
      -1,
      sizeof(RGB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarConfig_descriptor_, &CalendarConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpecialDay_descriptor_, &SpecialDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RGB_descriptor_, &RGB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete CalendarConfig::default_instance_;
  delete CalendarConfig_reflection_;
  delete SpecialDay::default_instance_;
  delete SpecialDay_reflection_;
  delete RGB::default_instance_;
  delete RGB_reflection_;
}

void protobuf_AddDesc_config_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\006config\"\211\004\n\016CalendarConfi"
    "g\022\025\n\tnum_years\030\001 \001(\005:\00230\022\'\n\013special_day\030"
    "\002 \003(\0132\022.config.SpecialDay\022\021\n\tcell_size\030\003"
    " \001(\005\022\023\n\013cell_margin\030\004 \001(\005\022\021\n\tfont_size\030\005"
    " \001(\005\022\030\n\020bigger_font_size\030\006 \001(\005\022\022\n\nline_w"
    "idth\030\007 \001(\005\022\032\n\022month_label_height\030\010 \001(\005\022\030"
    "\n\020year_label_width\030\t \001(\005\022\037\n\nrgb_header\030\n"
    " \001(\0132\013.config.RGB\022&\n\021rgb_header_sunday\030\013"
    " \001(\0132\013.config.RGB\022#\n\016rgb_month_line\030\014 \001("
    "\0132\013.config.RGB\022 \n\013rgb_holiday\030\022 \001(\0132\013.co"
    "nfig.RGB\022\031\n\021bottom_left_label\030\r \001(\t\022\032\n\022b"
    "ottom_right_label\030\016 \001(\t\022\032\n\022header_font_f"
    "amily\030\017 \001(\t\022\032\n\022number_font_family\030\020 \001(\t\022"
    "\031\n\021quote_font_family\030\021 \001(\t\"s\n\nSpecialDay"
    "\022\r\n\005month\030\001 \002(\005\022\013\n\003day\030\002 \002(\005\022\r\n\005label\030\003 "
    "\001(\t\022\022\n\nfirst_year\030\004 \001(\005\022\014\n\004year\030\005 \001(\005\022\030\n"
    "\003rgb\030\006 \001(\0132\013.config.RGB\"/\n\003RGB\022\013\n\003red\030\001 "
    "\002(\005\022\r\n\005green\030\002 \002(\005\022\014\n\004blue\030\003 \002(\005", 712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  CalendarConfig::default_instance_ = new CalendarConfig();
  SpecialDay::default_instance_ = new SpecialDay();
  RGB::default_instance_ = new RGB();
  CalendarConfig::default_instance_->InitAsDefaultInstance();
  SpecialDay::default_instance_->InitAsDefaultInstance();
  RGB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarConfig::kNumYearsFieldNumber;
const int CalendarConfig::kSpecialDayFieldNumber;
const int CalendarConfig::kCellSizeFieldNumber;
const int CalendarConfig::kCellMarginFieldNumber;
const int CalendarConfig::kFontSizeFieldNumber;
const int CalendarConfig::kBiggerFontSizeFieldNumber;
const int CalendarConfig::kLineWidthFieldNumber;
const int CalendarConfig::kMonthLabelHeightFieldNumber;
const int CalendarConfig::kYearLabelWidthFieldNumber;
const int CalendarConfig::kRgbHeaderFieldNumber;
const int CalendarConfig::kRgbHeaderSundayFieldNumber;
const int CalendarConfig::kRgbMonthLineFieldNumber;
const int CalendarConfig::kRgbHolidayFieldNumber;
const int CalendarConfig::kBottomLeftLabelFieldNumber;
const int CalendarConfig::kBottomRightLabelFieldNumber;
const int CalendarConfig::kHeaderFontFamilyFieldNumber;
const int CalendarConfig::kNumberFontFamilyFieldNumber;
const int CalendarConfig::kQuoteFontFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarConfig::CalendarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.CalendarConfig)
}

void CalendarConfig::InitAsDefaultInstance() {
  rgb_header_ = const_cast< ::config::RGB*>(&::config::RGB::default_instance());
  rgb_header_sunday_ = const_cast< ::config::RGB*>(&::config::RGB::default_instance());
  rgb_month_line_ = const_cast< ::config::RGB*>(&::config::RGB::default_instance());
  rgb_holiday_ = const_cast< ::config::RGB*>(&::config::RGB::default_instance());
}

CalendarConfig::CalendarConfig(const CalendarConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:config.CalendarConfig)
}

void CalendarConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_years_ = 30;
  cell_size_ = 0;
  cell_margin_ = 0;
  font_size_ = 0;
  bigger_font_size_ = 0;
  line_width_ = 0;
  month_label_height_ = 0;
  year_label_width_ = 0;
  rgb_header_ = NULL;
  rgb_header_sunday_ = NULL;
  rgb_month_line_ = NULL;
  rgb_holiday_ = NULL;
  bottom_left_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bottom_right_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarConfig::~CalendarConfig() {
  // @@protoc_insertion_point(destructor:config.CalendarConfig)
  SharedDtor();
}

void CalendarConfig::SharedDtor() {
  bottom_left_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bottom_right_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rgb_header_;
    delete rgb_header_sunday_;
    delete rgb_month_line_;
    delete rgb_holiday_;
  }
}

void CalendarConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarConfig_descriptor_;
}

const CalendarConfig& CalendarConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

CalendarConfig* CalendarConfig::default_instance_ = NULL;

CalendarConfig* CalendarConfig::New(::google::protobuf::Arena* arena) const {
  CalendarConfig* n = new CalendarConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.CalendarConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CalendarConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CalendarConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(cell_size_, month_label_height_);
    num_years_ = 30;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    year_label_width_ = 0;
    if (has_rgb_header()) {
      if (rgb_header_ != NULL) rgb_header_->::config::RGB::Clear();
    }
    if (has_rgb_header_sunday()) {
      if (rgb_header_sunday_ != NULL) rgb_header_sunday_->::config::RGB::Clear();
    }
    if (has_rgb_month_line()) {
      if (rgb_month_line_ != NULL) rgb_month_line_->::config::RGB::Clear();
    }
    if (has_rgb_holiday()) {
      if (rgb_holiday_ != NULL) rgb_holiday_->::config::RGB::Clear();
    }
    if (has_bottom_left_label()) {
      bottom_left_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bottom_right_label()) {
      bottom_right_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_header_font_family()) {
      header_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_number_font_family()) {
      number_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_quote_font_family()) {
      quote_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  special_day_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.CalendarConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_years = 1 [default = 30];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_years_)));
          set_has_num_years();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_special_day;
        break;
      }

      // repeated .config.SpecialDay special_day = 2;
      case 2: {
        if (tag == 18) {
         parse_special_day:
          DO_(input->IncrementRecursionDepth());
         parse_loop_special_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_special_day()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_special_day;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_cell_size;
        break;
      }

      // optional int32 cell_size = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_size_)));
          set_has_cell_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cell_margin;
        break;
      }

      // optional int32 cell_margin = 4;
      case 4: {
        if (tag == 32) {
         parse_cell_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_margin_)));
          set_has_cell_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 5;
      case 5: {
        if (tag == 40) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bigger_font_size;
        break;
      }

      // optional int32 bigger_font_size = 6;
      case 6: {
        if (tag == 48) {
         parse_bigger_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigger_font_size_)));
          set_has_bigger_font_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_line_width;
        break;
      }

      // optional int32 line_width = 7;
      case 7: {
        if (tag == 56) {
         parse_line_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_width_)));
          set_has_line_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_month_label_height;
        break;
      }

      // optional int32 month_label_height = 8;
      case 8: {
        if (tag == 64) {
         parse_month_label_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_label_height_)));
          set_has_month_label_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_year_label_width;
        break;
      }

      // optional int32 year_label_width = 9;
      case 9: {
        if (tag == 72) {
         parse_year_label_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_label_width_)));
          set_has_year_label_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rgb_header;
        break;
      }

      // optional .config.RGB rgb_header = 10;
      case 10: {
        if (tag == 82) {
         parse_rgb_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rgb_header_sunday;
        break;
      }

      // optional .config.RGB rgb_header_sunday = 11;
      case 11: {
        if (tag == 90) {
         parse_rgb_header_sunday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb_header_sunday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rgb_month_line;
        break;
      }

      // optional .config.RGB rgb_month_line = 12;
      case 12: {
        if (tag == 98) {
         parse_rgb_month_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb_month_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_bottom_left_label;
        break;
      }

      // optional string bottom_left_label = 13;
      case 13: {
        if (tag == 106) {
         parse_bottom_left_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bottom_left_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom_left_label().data(), this->bottom_left_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.bottom_left_label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bottom_right_label;
        break;
      }

      // optional string bottom_right_label = 14;
      case 14: {
        if (tag == 114) {
         parse_bottom_right_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bottom_right_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom_right_label().data(), this->bottom_right_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.bottom_right_label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_header_font_family;
        break;
      }

      // optional string header_font_family = 15;
      case 15: {
        if (tag == 122) {
         parse_header_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_font_family().data(), this->header_font_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.header_font_family");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_number_font_family;
        break;
      }

      // optional string number_font_family = 16;
      case 16: {
        if (tag == 130) {
         parse_number_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number_font_family().data(), this->number_font_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.number_font_family");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_quote_font_family;
        break;
      }

      // optional string quote_font_family = 17;
      case 17: {
        if (tag == 138) {
         parse_quote_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quote_font_family().data(), this->quote_font_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.CalendarConfig.quote_font_family");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_rgb_holiday;
        break;
      }

      // optional .config.RGB rgb_holiday = 18;
      case 18: {
        if (tag == 146) {
         parse_rgb_holiday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb_holiday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.CalendarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.CalendarConfig)
  return false;
#undef DO_
}

void CalendarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.CalendarConfig)
  // optional int32 num_years = 1 [default = 30];
  if (has_num_years()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_years(), output);
  }

  // repeated .config.SpecialDay special_day = 2;
  for (unsigned int i = 0, n = this->special_day_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->special_day(i), output);
  }

  // optional int32 cell_size = 3;
  if (has_cell_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cell_size(), output);
  }

  // optional int32 cell_margin = 4;
  if (has_cell_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cell_margin(), output);
  }

  // optional int32 font_size = 5;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->font_size(), output);
  }

  // optional int32 bigger_font_size = 6;
  if (has_bigger_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bigger_font_size(), output);
  }

  // optional int32 line_width = 7;
  if (has_line_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->line_width(), output);
  }

  // optional int32 month_label_height = 8;
  if (has_month_label_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->month_label_height(), output);
  }

  // optional int32 year_label_width = 9;
  if (has_year_label_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->year_label_width(), output);
  }

  // optional .config.RGB rgb_header = 10;
  if (has_rgb_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->rgb_header_, output);
  }

  // optional .config.RGB rgb_header_sunday = 11;
  if (has_rgb_header_sunday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->rgb_header_sunday_, output);
  }

  // optional .config.RGB rgb_month_line = 12;
  if (has_rgb_month_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->rgb_month_line_, output);
  }

  // optional string bottom_left_label = 13;
  if (has_bottom_left_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom_left_label().data(), this->bottom_left_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.bottom_left_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->bottom_left_label(), output);
  }

  // optional string bottom_right_label = 14;
  if (has_bottom_right_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom_right_label().data(), this->bottom_right_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.bottom_right_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->bottom_right_label(), output);
  }

  // optional string header_font_family = 15;
  if (has_header_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_font_family().data(), this->header_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.header_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->header_font_family(), output);
  }

  // optional string number_font_family = 16;
  if (has_number_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number_font_family().data(), this->number_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.number_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->number_font_family(), output);
  }

  // optional string quote_font_family = 17;
  if (has_quote_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_font_family().data(), this->quote_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.quote_font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->quote_font_family(), output);
  }

  // optional .config.RGB rgb_holiday = 18;
  if (has_rgb_holiday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->rgb_holiday_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.CalendarConfig)
}

::google::protobuf::uint8* CalendarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.CalendarConfig)
  // optional int32 num_years = 1 [default = 30];
  if (has_num_years()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_years(), target);
  }

  // repeated .config.SpecialDay special_day = 2;
  for (unsigned int i = 0, n = this->special_day_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->special_day(i), false, target);
  }

  // optional int32 cell_size = 3;
  if (has_cell_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cell_size(), target);
  }

  // optional int32 cell_margin = 4;
  if (has_cell_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cell_margin(), target);
  }

  // optional int32 font_size = 5;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->font_size(), target);
  }

  // optional int32 bigger_font_size = 6;
  if (has_bigger_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bigger_font_size(), target);
  }

  // optional int32 line_width = 7;
  if (has_line_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->line_width(), target);
  }

  // optional int32 month_label_height = 8;
  if (has_month_label_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->month_label_height(), target);
  }

  // optional int32 year_label_width = 9;
  if (has_year_label_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->year_label_width(), target);
  }

  // optional .config.RGB rgb_header = 10;
  if (has_rgb_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->rgb_header_, false, target);
  }

  // optional .config.RGB rgb_header_sunday = 11;
  if (has_rgb_header_sunday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->rgb_header_sunday_, false, target);
  }

  // optional .config.RGB rgb_month_line = 12;
  if (has_rgb_month_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->rgb_month_line_, false, target);
  }

  // optional string bottom_left_label = 13;
  if (has_bottom_left_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom_left_label().data(), this->bottom_left_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.bottom_left_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->bottom_left_label(), target);
  }

  // optional string bottom_right_label = 14;
  if (has_bottom_right_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom_right_label().data(), this->bottom_right_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.bottom_right_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bottom_right_label(), target);
  }

  // optional string header_font_family = 15;
  if (has_header_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_font_family().data(), this->header_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.header_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->header_font_family(), target);
  }

  // optional string number_font_family = 16;
  if (has_number_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number_font_family().data(), this->number_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.number_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->number_font_family(), target);
  }

  // optional string quote_font_family = 17;
  if (has_quote_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_font_family().data(), this->quote_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.CalendarConfig.quote_font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->quote_font_family(), target);
  }

  // optional .config.RGB rgb_holiday = 18;
  if (has_rgb_holiday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->rgb_holiday_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.CalendarConfig)
  return target;
}

int CalendarConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:config.CalendarConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional int32 num_years = 1 [default = 30];
    if (has_num_years()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_years());
    }

    // optional int32 cell_size = 3;
    if (has_cell_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_size());
    }

    // optional int32 cell_margin = 4;
    if (has_cell_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_margin());
    }

    // optional int32 font_size = 5;
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

    // optional int32 bigger_font_size = 6;
    if (has_bigger_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigger_font_size());
    }

    // optional int32 line_width = 7;
    if (has_line_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_width());
    }

    // optional int32 month_label_height = 8;
    if (has_month_label_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month_label_height());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 year_label_width = 9;
    if (has_year_label_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_label_width());
    }

    // optional .config.RGB rgb_header = 10;
    if (has_rgb_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb_header_);
    }

    // optional .config.RGB rgb_header_sunday = 11;
    if (has_rgb_header_sunday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb_header_sunday_);
    }

    // optional .config.RGB rgb_month_line = 12;
    if (has_rgb_month_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb_month_line_);
    }

    // optional .config.RGB rgb_holiday = 18;
    if (has_rgb_holiday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb_holiday_);
    }

    // optional string bottom_left_label = 13;
    if (has_bottom_left_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bottom_left_label());
    }

    // optional string bottom_right_label = 14;
    if (has_bottom_right_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bottom_right_label());
    }

    // optional string header_font_family = 15;
    if (has_header_font_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header_font_family());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string number_font_family = 16;
    if (has_number_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number_font_family());
    }

    // optional string quote_font_family = 17;
    if (has_quote_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quote_font_family());
    }

  }
  // repeated .config.SpecialDay special_day = 2;
  total_size += 1 * this->special_day_size();
  for (int i = 0; i < this->special_day_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special_day(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.CalendarConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalendarConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalendarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.CalendarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.CalendarConfig)
    MergeFrom(*source);
  }
}

void CalendarConfig::MergeFrom(const CalendarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.CalendarConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  special_day_.MergeFrom(from.special_day_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_years()) {
      set_num_years(from.num_years());
    }
    if (from.has_cell_size()) {
      set_cell_size(from.cell_size());
    }
    if (from.has_cell_margin()) {
      set_cell_margin(from.cell_margin());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_bigger_font_size()) {
      set_bigger_font_size(from.bigger_font_size());
    }
    if (from.has_line_width()) {
      set_line_width(from.line_width());
    }
    if (from.has_month_label_height()) {
      set_month_label_height(from.month_label_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_year_label_width()) {
      set_year_label_width(from.year_label_width());
    }
    if (from.has_rgb_header()) {
      mutable_rgb_header()->::config::RGB::MergeFrom(from.rgb_header());
    }
    if (from.has_rgb_header_sunday()) {
      mutable_rgb_header_sunday()->::config::RGB::MergeFrom(from.rgb_header_sunday());
    }
    if (from.has_rgb_month_line()) {
      mutable_rgb_month_line()->::config::RGB::MergeFrom(from.rgb_month_line());
    }
    if (from.has_rgb_holiday()) {
      mutable_rgb_holiday()->::config::RGB::MergeFrom(from.rgb_holiday());
    }
    if (from.has_bottom_left_label()) {
      set_has_bottom_left_label();
      bottom_left_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bottom_left_label_);
    }
    if (from.has_bottom_right_label()) {
      set_has_bottom_right_label();
      bottom_right_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bottom_right_label_);
    }
    if (from.has_header_font_family()) {
      set_has_header_font_family();
      header_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_font_family_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_number_font_family()) {
      set_has_number_font_family();
      number_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_font_family_);
    }
    if (from.has_quote_font_family()) {
      set_has_quote_font_family();
      quote_font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_font_family_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.CalendarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarConfig::CopyFrom(const CalendarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.CalendarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->special_day())) return false;
  if (has_rgb_header()) {
    if (!this->rgb_header_->IsInitialized()) return false;
  }
  if (has_rgb_header_sunday()) {
    if (!this->rgb_header_sunday_->IsInitialized()) return false;
  }
  if (has_rgb_month_line()) {
    if (!this->rgb_month_line_->IsInitialized()) return false;
  }
  if (has_rgb_holiday()) {
    if (!this->rgb_holiday_->IsInitialized()) return false;
  }
  return true;
}

void CalendarConfig::Swap(CalendarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarConfig::InternalSwap(CalendarConfig* other) {
  std::swap(num_years_, other->num_years_);
  special_day_.UnsafeArenaSwap(&other->special_day_);
  std::swap(cell_size_, other->cell_size_);
  std::swap(cell_margin_, other->cell_margin_);
  std::swap(font_size_, other->font_size_);
  std::swap(bigger_font_size_, other->bigger_font_size_);
  std::swap(line_width_, other->line_width_);
  std::swap(month_label_height_, other->month_label_height_);
  std::swap(year_label_width_, other->year_label_width_);
  std::swap(rgb_header_, other->rgb_header_);
  std::swap(rgb_header_sunday_, other->rgb_header_sunday_);
  std::swap(rgb_month_line_, other->rgb_month_line_);
  std::swap(rgb_holiday_, other->rgb_holiday_);
  bottom_left_label_.Swap(&other->bottom_left_label_);
  bottom_right_label_.Swap(&other->bottom_right_label_);
  header_font_family_.Swap(&other->header_font_family_);
  number_font_family_.Swap(&other->number_font_family_);
  quote_font_family_.Swap(&other->quote_font_family_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarConfig_descriptor_;
  metadata.reflection = CalendarConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarConfig

// optional int32 num_years = 1 [default = 30];
bool CalendarConfig::has_num_years() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalendarConfig::set_has_num_years() {
  _has_bits_[0] |= 0x00000001u;
}
void CalendarConfig::clear_has_num_years() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalendarConfig::clear_num_years() {
  num_years_ = 30;
  clear_has_num_years();
}
 ::google::protobuf::int32 CalendarConfig::num_years() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.num_years)
  return num_years_;
}
 void CalendarConfig::set_num_years(::google::protobuf::int32 value) {
  set_has_num_years();
  num_years_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.num_years)
}

// repeated .config.SpecialDay special_day = 2;
int CalendarConfig::special_day_size() const {
  return special_day_.size();
}
void CalendarConfig::clear_special_day() {
  special_day_.Clear();
}
const ::config::SpecialDay& CalendarConfig::special_day(int index) const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.special_day)
  return special_day_.Get(index);
}
::config::SpecialDay* CalendarConfig::mutable_special_day(int index) {
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.special_day)
  return special_day_.Mutable(index);
}
::config::SpecialDay* CalendarConfig::add_special_day() {
  // @@protoc_insertion_point(field_add:config.CalendarConfig.special_day)
  return special_day_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::SpecialDay >*
CalendarConfig::mutable_special_day() {
  // @@protoc_insertion_point(field_mutable_list:config.CalendarConfig.special_day)
  return &special_day_;
}
const ::google::protobuf::RepeatedPtrField< ::config::SpecialDay >&
CalendarConfig::special_day() const {
  // @@protoc_insertion_point(field_list:config.CalendarConfig.special_day)
  return special_day_;
}

// optional int32 cell_size = 3;
bool CalendarConfig::has_cell_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CalendarConfig::set_has_cell_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CalendarConfig::clear_has_cell_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CalendarConfig::clear_cell_size() {
  cell_size_ = 0;
  clear_has_cell_size();
}
 ::google::protobuf::int32 CalendarConfig::cell_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_size)
  return cell_size_;
}
 void CalendarConfig::set_cell_size(::google::protobuf::int32 value) {
  set_has_cell_size();
  cell_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_size)
}

// optional int32 cell_margin = 4;
bool CalendarConfig::has_cell_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CalendarConfig::set_has_cell_margin() {
  _has_bits_[0] |= 0x00000008u;
}
void CalendarConfig::clear_has_cell_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
void CalendarConfig::clear_cell_margin() {
  cell_margin_ = 0;
  clear_has_cell_margin();
}
 ::google::protobuf::int32 CalendarConfig::cell_margin() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.cell_margin)
  return cell_margin_;
}
 void CalendarConfig::set_cell_margin(::google::protobuf::int32 value) {
  set_has_cell_margin();
  cell_margin_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.cell_margin)
}

// optional int32 font_size = 5;
bool CalendarConfig::has_font_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CalendarConfig::set_has_font_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CalendarConfig::clear_has_font_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CalendarConfig::clear_font_size() {
  font_size_ = 0;
  clear_has_font_size();
}
 ::google::protobuf::int32 CalendarConfig::font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.font_size)
  return font_size_;
}
 void CalendarConfig::set_font_size(::google::protobuf::int32 value) {
  set_has_font_size();
  font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.font_size)
}

// optional int32 bigger_font_size = 6;
bool CalendarConfig::has_bigger_font_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CalendarConfig::set_has_bigger_font_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CalendarConfig::clear_has_bigger_font_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CalendarConfig::clear_bigger_font_size() {
  bigger_font_size_ = 0;
  clear_has_bigger_font_size();
}
 ::google::protobuf::int32 CalendarConfig::bigger_font_size() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bigger_font_size)
  return bigger_font_size_;
}
 void CalendarConfig::set_bigger_font_size(::google::protobuf::int32 value) {
  set_has_bigger_font_size();
  bigger_font_size_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bigger_font_size)
}

// optional int32 line_width = 7;
bool CalendarConfig::has_line_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CalendarConfig::set_has_line_width() {
  _has_bits_[0] |= 0x00000040u;
}
void CalendarConfig::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void CalendarConfig::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
 ::google::protobuf::int32 CalendarConfig::line_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.line_width)
  return line_width_;
}
 void CalendarConfig::set_line_width(::google::protobuf::int32 value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.line_width)
}

// optional int32 month_label_height = 8;
bool CalendarConfig::has_month_label_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CalendarConfig::set_has_month_label_height() {
  _has_bits_[0] |= 0x00000080u;
}
void CalendarConfig::clear_has_month_label_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void CalendarConfig::clear_month_label_height() {
  month_label_height_ = 0;
  clear_has_month_label_height();
}
 ::google::protobuf::int32 CalendarConfig::month_label_height() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.month_label_height)
  return month_label_height_;
}
 void CalendarConfig::set_month_label_height(::google::protobuf::int32 value) {
  set_has_month_label_height();
  month_label_height_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.month_label_height)
}

// optional int32 year_label_width = 9;
bool CalendarConfig::has_year_label_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CalendarConfig::set_has_year_label_width() {
  _has_bits_[0] |= 0x00000100u;
}
void CalendarConfig::clear_has_year_label_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void CalendarConfig::clear_year_label_width() {
  year_label_width_ = 0;
  clear_has_year_label_width();
}
 ::google::protobuf::int32 CalendarConfig::year_label_width() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.year_label_width)
  return year_label_width_;
}
 void CalendarConfig::set_year_label_width(::google::protobuf::int32 value) {
  set_has_year_label_width();
  year_label_width_ = value;
  // @@protoc_insertion_point(field_set:config.CalendarConfig.year_label_width)
}

// optional .config.RGB rgb_header = 10;
bool CalendarConfig::has_rgb_header() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CalendarConfig::set_has_rgb_header() {
  _has_bits_[0] |= 0x00000200u;
}
void CalendarConfig::clear_has_rgb_header() {
  _has_bits_[0] &= ~0x00000200u;
}
void CalendarConfig::clear_rgb_header() {
  if (rgb_header_ != NULL) rgb_header_->::config::RGB::Clear();
  clear_has_rgb_header();
}
const ::config::RGB& CalendarConfig::rgb_header() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_header)
  return rgb_header_ != NULL ? *rgb_header_ : *default_instance_->rgb_header_;
}
::config::RGB* CalendarConfig::mutable_rgb_header() {
  set_has_rgb_header();
  if (rgb_header_ == NULL) {
    rgb_header_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_header)
  return rgb_header_;
}
::config::RGB* CalendarConfig::release_rgb_header() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_header)
  clear_has_rgb_header();
  ::config::RGB* temp = rgb_header_;
  rgb_header_ = NULL;
  return temp;
}
void CalendarConfig::set_allocated_rgb_header(::config::RGB* rgb_header) {
  delete rgb_header_;
  rgb_header_ = rgb_header;
  if (rgb_header) {
    set_has_rgb_header();
  } else {
    clear_has_rgb_header();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_header)
}

// optional .config.RGB rgb_header_sunday = 11;
bool CalendarConfig::has_rgb_header_sunday() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CalendarConfig::set_has_rgb_header_sunday() {
  _has_bits_[0] |= 0x00000400u;
}
void CalendarConfig::clear_has_rgb_header_sunday() {
  _has_bits_[0] &= ~0x00000400u;
}
void CalendarConfig::clear_rgb_header_sunday() {
  if (rgb_header_sunday_ != NULL) rgb_header_sunday_->::config::RGB::Clear();
  clear_has_rgb_header_sunday();
}
const ::config::RGB& CalendarConfig::rgb_header_sunday() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_header_sunday)
  return rgb_header_sunday_ != NULL ? *rgb_header_sunday_ : *default_instance_->rgb_header_sunday_;
}
::config::RGB* CalendarConfig::mutable_rgb_header_sunday() {
  set_has_rgb_header_sunday();
  if (rgb_header_sunday_ == NULL) {
    rgb_header_sunday_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_header_sunday)
  return rgb_header_sunday_;
}
::config::RGB* CalendarConfig::release_rgb_header_sunday() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_header_sunday)
  clear_has_rgb_header_sunday();
  ::config::RGB* temp = rgb_header_sunday_;
  rgb_header_sunday_ = NULL;
  return temp;
}
void CalendarConfig::set_allocated_rgb_header_sunday(::config::RGB* rgb_header_sunday) {
  delete rgb_header_sunday_;
  rgb_header_sunday_ = rgb_header_sunday;
  if (rgb_header_sunday) {
    set_has_rgb_header_sunday();
  } else {
    clear_has_rgb_header_sunday();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_header_sunday)
}

// optional .config.RGB rgb_month_line = 12;
bool CalendarConfig::has_rgb_month_line() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CalendarConfig::set_has_rgb_month_line() {
  _has_bits_[0] |= 0x00000800u;
}
void CalendarConfig::clear_has_rgb_month_line() {
  _has_bits_[0] &= ~0x00000800u;
}
void CalendarConfig::clear_rgb_month_line() {
  if (rgb_month_line_ != NULL) rgb_month_line_->::config::RGB::Clear();
  clear_has_rgb_month_line();
}
const ::config::RGB& CalendarConfig::rgb_month_line() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_month_line)
  return rgb_month_line_ != NULL ? *rgb_month_line_ : *default_instance_->rgb_month_line_;
}
::config::RGB* CalendarConfig::mutable_rgb_month_line() {
  set_has_rgb_month_line();
  if (rgb_month_line_ == NULL) {
    rgb_month_line_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_month_line)
  return rgb_month_line_;
}
::config::RGB* CalendarConfig::release_rgb_month_line() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_month_line)
  clear_has_rgb_month_line();
  ::config::RGB* temp = rgb_month_line_;
  rgb_month_line_ = NULL;
  return temp;
}
void CalendarConfig::set_allocated_rgb_month_line(::config::RGB* rgb_month_line) {
  delete rgb_month_line_;
  rgb_month_line_ = rgb_month_line;
  if (rgb_month_line) {
    set_has_rgb_month_line();
  } else {
    clear_has_rgb_month_line();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_month_line)
}

// optional .config.RGB rgb_holiday = 18;
bool CalendarConfig::has_rgb_holiday() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CalendarConfig::set_has_rgb_holiday() {
  _has_bits_[0] |= 0x00001000u;
}
void CalendarConfig::clear_has_rgb_holiday() {
  _has_bits_[0] &= ~0x00001000u;
}
void CalendarConfig::clear_rgb_holiday() {
  if (rgb_holiday_ != NULL) rgb_holiday_->::config::RGB::Clear();
  clear_has_rgb_holiday();
}
const ::config::RGB& CalendarConfig::rgb_holiday() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.rgb_holiday)
  return rgb_holiday_ != NULL ? *rgb_holiday_ : *default_instance_->rgb_holiday_;
}
::config::RGB* CalendarConfig::mutable_rgb_holiday() {
  set_has_rgb_holiday();
  if (rgb_holiday_ == NULL) {
    rgb_holiday_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.rgb_holiday)
  return rgb_holiday_;
}
::config::RGB* CalendarConfig::release_rgb_holiday() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.rgb_holiday)
  clear_has_rgb_holiday();
  ::config::RGB* temp = rgb_holiday_;
  rgb_holiday_ = NULL;
  return temp;
}
void CalendarConfig::set_allocated_rgb_holiday(::config::RGB* rgb_holiday) {
  delete rgb_holiday_;
  rgb_holiday_ = rgb_holiday;
  if (rgb_holiday) {
    set_has_rgb_holiday();
  } else {
    clear_has_rgb_holiday();
  }
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.rgb_holiday)
}

// optional string bottom_left_label = 13;
bool CalendarConfig::has_bottom_left_label() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CalendarConfig::set_has_bottom_left_label() {
  _has_bits_[0] |= 0x00002000u;
}
void CalendarConfig::clear_has_bottom_left_label() {
  _has_bits_[0] &= ~0x00002000u;
}
void CalendarConfig::clear_bottom_left_label() {
  bottom_left_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bottom_left_label();
}
 const ::std::string& CalendarConfig::bottom_left_label() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bottom_left_label)
  return bottom_left_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_bottom_left_label(const ::std::string& value) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bottom_left_label)
}
 void CalendarConfig::set_bottom_left_label(const char* value) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.bottom_left_label)
}
 void CalendarConfig::set_bottom_left_label(const char* value, size_t size) {
  set_has_bottom_left_label();
  bottom_left_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.bottom_left_label)
}
 ::std::string* CalendarConfig::mutable_bottom_left_label() {
  set_has_bottom_left_label();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.bottom_left_label)
  return bottom_left_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarConfig::release_bottom_left_label() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.bottom_left_label)
  clear_has_bottom_left_label();
  return bottom_left_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_allocated_bottom_left_label(::std::string* bottom_left_label) {
  if (bottom_left_label != NULL) {
    set_has_bottom_left_label();
  } else {
    clear_has_bottom_left_label();
  }
  bottom_left_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottom_left_label);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.bottom_left_label)
}

// optional string bottom_right_label = 14;
bool CalendarConfig::has_bottom_right_label() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CalendarConfig::set_has_bottom_right_label() {
  _has_bits_[0] |= 0x00004000u;
}
void CalendarConfig::clear_has_bottom_right_label() {
  _has_bits_[0] &= ~0x00004000u;
}
void CalendarConfig::clear_bottom_right_label() {
  bottom_right_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bottom_right_label();
}
 const ::std::string& CalendarConfig::bottom_right_label() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.bottom_right_label)
  return bottom_right_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_bottom_right_label(const ::std::string& value) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.bottom_right_label)
}
 void CalendarConfig::set_bottom_right_label(const char* value) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.bottom_right_label)
}
 void CalendarConfig::set_bottom_right_label(const char* value, size_t size) {
  set_has_bottom_right_label();
  bottom_right_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.bottom_right_label)
}
 ::std::string* CalendarConfig::mutable_bottom_right_label() {
  set_has_bottom_right_label();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.bottom_right_label)
  return bottom_right_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarConfig::release_bottom_right_label() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.bottom_right_label)
  clear_has_bottom_right_label();
  return bottom_right_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_allocated_bottom_right_label(::std::string* bottom_right_label) {
  if (bottom_right_label != NULL) {
    set_has_bottom_right_label();
  } else {
    clear_has_bottom_right_label();
  }
  bottom_right_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bottom_right_label);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.bottom_right_label)
}

// optional string header_font_family = 15;
bool CalendarConfig::has_header_font_family() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CalendarConfig::set_has_header_font_family() {
  _has_bits_[0] |= 0x00008000u;
}
void CalendarConfig::clear_has_header_font_family() {
  _has_bits_[0] &= ~0x00008000u;
}
void CalendarConfig::clear_header_font_family() {
  header_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_font_family();
}
 const ::std::string& CalendarConfig::header_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.header_font_family)
  return header_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_header_font_family(const ::std::string& value) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.header_font_family)
}
 void CalendarConfig::set_header_font_family(const char* value) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.header_font_family)
}
 void CalendarConfig::set_header_font_family(const char* value, size_t size) {
  set_has_header_font_family();
  header_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.header_font_family)
}
 ::std::string* CalendarConfig::mutable_header_font_family() {
  set_has_header_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.header_font_family)
  return header_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarConfig::release_header_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.header_font_family)
  clear_has_header_font_family();
  return header_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_allocated_header_font_family(::std::string* header_font_family) {
  if (header_font_family != NULL) {
    set_has_header_font_family();
  } else {
    clear_has_header_font_family();
  }
  header_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.header_font_family)
}

// optional string number_font_family = 16;
bool CalendarConfig::has_number_font_family() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CalendarConfig::set_has_number_font_family() {
  _has_bits_[0] |= 0x00010000u;
}
void CalendarConfig::clear_has_number_font_family() {
  _has_bits_[0] &= ~0x00010000u;
}
void CalendarConfig::clear_number_font_family() {
  number_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number_font_family();
}
 const ::std::string& CalendarConfig::number_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.number_font_family)
  return number_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_number_font_family(const ::std::string& value) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.number_font_family)
}
 void CalendarConfig::set_number_font_family(const char* value) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.number_font_family)
}
 void CalendarConfig::set_number_font_family(const char* value, size_t size) {
  set_has_number_font_family();
  number_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.number_font_family)
}
 ::std::string* CalendarConfig::mutable_number_font_family() {
  set_has_number_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.number_font_family)
  return number_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarConfig::release_number_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.number_font_family)
  clear_has_number_font_family();
  return number_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_allocated_number_font_family(::std::string* number_font_family) {
  if (number_font_family != NULL) {
    set_has_number_font_family();
  } else {
    clear_has_number_font_family();
  }
  number_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.number_font_family)
}

// optional string quote_font_family = 17;
bool CalendarConfig::has_quote_font_family() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CalendarConfig::set_has_quote_font_family() {
  _has_bits_[0] |= 0x00020000u;
}
void CalendarConfig::clear_has_quote_font_family() {
  _has_bits_[0] &= ~0x00020000u;
}
void CalendarConfig::clear_quote_font_family() {
  quote_font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quote_font_family();
}
 const ::std::string& CalendarConfig::quote_font_family() const {
  // @@protoc_insertion_point(field_get:config.CalendarConfig.quote_font_family)
  return quote_font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_quote_font_family(const ::std::string& value) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.CalendarConfig.quote_font_family)
}
 void CalendarConfig::set_quote_font_family(const char* value) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.CalendarConfig.quote_font_family)
}
 void CalendarConfig::set_quote_font_family(const char* value, size_t size) {
  set_has_quote_font_family();
  quote_font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.CalendarConfig.quote_font_family)
}
 ::std::string* CalendarConfig::mutable_quote_font_family() {
  set_has_quote_font_family();
  // @@protoc_insertion_point(field_mutable:config.CalendarConfig.quote_font_family)
  return quote_font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarConfig::release_quote_font_family() {
  // @@protoc_insertion_point(field_release:config.CalendarConfig.quote_font_family)
  clear_has_quote_font_family();
  return quote_font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarConfig::set_allocated_quote_font_family(::std::string* quote_font_family) {
  if (quote_font_family != NULL) {
    set_has_quote_font_family();
  } else {
    clear_has_quote_font_family();
  }
  quote_font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote_font_family);
  // @@protoc_insertion_point(field_set_allocated:config.CalendarConfig.quote_font_family)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpecialDay::kMonthFieldNumber;
const int SpecialDay::kDayFieldNumber;
const int SpecialDay::kLabelFieldNumber;
const int SpecialDay::kFirstYearFieldNumber;
const int SpecialDay::kYearFieldNumber;
const int SpecialDay::kRgbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpecialDay::SpecialDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.SpecialDay)
}

void SpecialDay::InitAsDefaultInstance() {
  rgb_ = const_cast< ::config::RGB*>(&::config::RGB::default_instance());
}

SpecialDay::SpecialDay(const SpecialDay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:config.SpecialDay)
}

void SpecialDay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  month_ = 0;
  day_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_year_ = 0;
  year_ = 0;
  rgb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialDay::~SpecialDay() {
  // @@protoc_insertion_point(destructor:config.SpecialDay)
  SharedDtor();
}

void SpecialDay::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rgb_;
  }
}

void SpecialDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialDay_descriptor_;
}

const SpecialDay& SpecialDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

SpecialDay* SpecialDay::default_instance_ = NULL;

SpecialDay* SpecialDay::New(::google::protobuf::Arena* arena) const {
  SpecialDay* n = new SpecialDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpecialDay::Clear() {
// @@protoc_insertion_point(message_clear_start:config.SpecialDay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpecialDay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpecialDay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(month_, day_);
    ZR_(first_year_, year_);
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rgb()) {
      if (rgb_ != NULL) rgb_->::config::RGB::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpecialDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.SpecialDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 month = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // required int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional string label = 3;
      case 3: {
        if (tag == 26) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SpecialDay.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_first_year;
        break;
      }

      // optional int32 first_year = 4;
      case 4: {
        if (tag == 32) {
         parse_first_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_year_)));
          set_has_first_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_year;
        break;
      }

      // optional int32 year = 5;
      case 5: {
        if (tag == 40) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rgb;
        break;
      }

      // optional .config.RGB rgb = 6;
      case 6: {
        if (tag == 50) {
         parse_rgb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.SpecialDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.SpecialDay)
  return false;
#undef DO_
}

void SpecialDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.SpecialDay)
  // required int32 month = 1;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->month(), output);
  }

  // required int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SpecialDay.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label(), output);
  }

  // optional int32 first_year = 4;
  if (has_first_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->first_year(), output);
  }

  // optional int32 year = 5;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->year(), output);
  }

  // optional .config.RGB rgb = 6;
  if (has_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rgb_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.SpecialDay)
}

::google::protobuf::uint8* SpecialDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.SpecialDay)
  // required int32 month = 1;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->month(), target);
  }

  // required int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SpecialDay.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  // optional int32 first_year = 4;
  if (has_first_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->first_year(), target);
  }

  // optional int32 year = 5;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->year(), target);
  }

  // optional .config.RGB rgb = 6;
  if (has_rgb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->rgb_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.SpecialDay)
  return target;
}

int SpecialDay::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.SpecialDay)
  int total_size = 0;

  if (has_month()) {
    // required int32 month = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  if (has_day()) {
    // required int32 day = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  return total_size;
}
int SpecialDay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:config.SpecialDay)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 month = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());

    // required int32 day = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional int32 first_year = 4;
    if (has_first_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_year());
    }

    // optional int32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional .config.RGB rgb = 6;
    if (has_rgb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.SpecialDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpecialDay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpecialDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.SpecialDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.SpecialDay)
    MergeFrom(*source);
  }
}

void SpecialDay::MergeFrom(const SpecialDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.SpecialDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_first_year()) {
      set_first_year(from.first_year());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_rgb()) {
      mutable_rgb()->::config::RGB::MergeFrom(from.rgb());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpecialDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.SpecialDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialDay::CopyFrom(const SpecialDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.SpecialDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialDay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rgb()) {
    if (!this->rgb_->IsInitialized()) return false;
  }
  return true;
}

void SpecialDay::Swap(SpecialDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpecialDay::InternalSwap(SpecialDay* other) {
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  label_.Swap(&other->label_);
  std::swap(first_year_, other->first_year_);
  std::swap(year_, other->year_);
  std::swap(rgb_, other->rgb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpecialDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialDay_descriptor_;
  metadata.reflection = SpecialDay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpecialDay

// required int32 month = 1;
bool SpecialDay::has_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpecialDay::set_has_month() {
  _has_bits_[0] |= 0x00000001u;
}
void SpecialDay::clear_has_month() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpecialDay::clear_month() {
  month_ = 0;
  clear_has_month();
}
 ::google::protobuf::int32 SpecialDay::month() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.month)
  return month_;
}
 void SpecialDay::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.month)
}

// required int32 day = 2;
bool SpecialDay::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpecialDay::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
void SpecialDay::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpecialDay::clear_day() {
  day_ = 0;
  clear_has_day();
}
 ::google::protobuf::int32 SpecialDay::day() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.day)
  return day_;
}
 void SpecialDay::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.day)
}

// optional string label = 3;
bool SpecialDay::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpecialDay::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
void SpecialDay::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpecialDay::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& SpecialDay::label() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpecialDay::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SpecialDay.label)
}
 void SpecialDay::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SpecialDay.label)
}
 void SpecialDay::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SpecialDay.label)
}
 ::std::string* SpecialDay::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:config.SpecialDay.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpecialDay::release_label() {
  // @@protoc_insertion_point(field_release:config.SpecialDay.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpecialDay::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:config.SpecialDay.label)
}

// optional int32 first_year = 4;
bool SpecialDay::has_first_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpecialDay::set_has_first_year() {
  _has_bits_[0] |= 0x00000008u;
}
void SpecialDay::clear_has_first_year() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpecialDay::clear_first_year() {
  first_year_ = 0;
  clear_has_first_year();
}
 ::google::protobuf::int32 SpecialDay::first_year() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.first_year)
  return first_year_;
}
 void SpecialDay::set_first_year(::google::protobuf::int32 value) {
  set_has_first_year();
  first_year_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.first_year)
}

// optional int32 year = 5;
bool SpecialDay::has_year() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpecialDay::set_has_year() {
  _has_bits_[0] |= 0x00000010u;
}
void SpecialDay::clear_has_year() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpecialDay::clear_year() {
  year_ = 0;
  clear_has_year();
}
 ::google::protobuf::int32 SpecialDay::year() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.year)
  return year_;
}
 void SpecialDay::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:config.SpecialDay.year)
}

// optional .config.RGB rgb = 6;
bool SpecialDay::has_rgb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpecialDay::set_has_rgb() {
  _has_bits_[0] |= 0x00000020u;
}
void SpecialDay::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpecialDay::clear_rgb() {
  if (rgb_ != NULL) rgb_->::config::RGB::Clear();
  clear_has_rgb();
}
const ::config::RGB& SpecialDay::rgb() const {
  // @@protoc_insertion_point(field_get:config.SpecialDay.rgb)
  return rgb_ != NULL ? *rgb_ : *default_instance_->rgb_;
}
::config::RGB* SpecialDay::mutable_rgb() {
  set_has_rgb();
  if (rgb_ == NULL) {
    rgb_ = new ::config::RGB;
  }
  // @@protoc_insertion_point(field_mutable:config.SpecialDay.rgb)
  return rgb_;
}
::config::RGB* SpecialDay::release_rgb() {
  // @@protoc_insertion_point(field_release:config.SpecialDay.rgb)
  clear_has_rgb();
  ::config::RGB* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
void SpecialDay::set_allocated_rgb(::config::RGB* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    set_has_rgb();
  } else {
    clear_has_rgb();
  }
  // @@protoc_insertion_point(field_set_allocated:config.SpecialDay.rgb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RGB::kRedFieldNumber;
const int RGB::kGreenFieldNumber;
const int RGB::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RGB::RGB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.RGB)
}

void RGB::InitAsDefaultInstance() {
}

RGB::RGB(const RGB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:config.RGB)
}

void RGB::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:config.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGB_descriptor_;
}

const RGB& RGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

RGB* RGB::default_instance_ = NULL;

RGB* RGB::New(::google::protobuf::Arena* arena) const {
  RGB* n = new RGB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:config.RGB)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RGB, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RGB*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(red_, blue_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.RGB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 red = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_green;
        break;
      }

      // required int32 green = 2;
      case 2: {
        if (tag == 16) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blue;
        break;
      }

      // required int32 blue = 3;
      case 3: {
        if (tag == 24) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.RGB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.RGB)
  return false;
#undef DO_
}

void RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.RGB)
  // required int32 red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->red(), output);
  }

  // required int32 green = 2;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green(), output);
  }

  // required int32 blue = 3;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.RGB)
}

::google::protobuf::uint8* RGB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.RGB)
  // required int32 red = 1;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->red(), target);
  }

  // required int32 green = 2;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->green(), target);
  }

  // required int32 blue = 3;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.RGB)
  return target;
}

int RGB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.RGB)
  int total_size = 0;

  if (has_red()) {
    // required int32 red = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red());
  }

  if (has_green()) {
    // required int32 green = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green());
  }

  if (has_blue()) {
    // required int32 blue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue());
  }

  return total_size;
}
int RGB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:config.RGB)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 red = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red());

    // required int32 green = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green());

    // required int32 blue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.RGB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RGB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RGB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.RGB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.RGB)
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.RGB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RGB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RGB::Swap(RGB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RGB::InternalSwap(RGB* other) {
  std::swap(red_, other->red_);
  std::swap(green_, other->green_);
  std::swap(blue_, other->blue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGB_descriptor_;
  metadata.reflection = RGB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RGB

// required int32 red = 1;
bool RGB::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RGB::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
void RGB::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
void RGB::clear_red() {
  red_ = 0;
  clear_has_red();
}
 ::google::protobuf::int32 RGB::red() const {
  // @@protoc_insertion_point(field_get:config.RGB.red)
  return red_;
}
 void RGB::set_red(::google::protobuf::int32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.red)
}

// required int32 green = 2;
bool RGB::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RGB::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
void RGB::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
void RGB::clear_green() {
  green_ = 0;
  clear_has_green();
}
 ::google::protobuf::int32 RGB::green() const {
  // @@protoc_insertion_point(field_get:config.RGB.green)
  return green_;
}
 void RGB::set_green(::google::protobuf::int32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.green)
}

// required int32 blue = 3;
bool RGB::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RGB::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
void RGB::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
void RGB::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
 ::google::protobuf::int32 RGB::blue() const {
  // @@protoc_insertion_point(field_get:config.RGB.blue)
  return blue_;
}
 void RGB::set_blue(::google::protobuf::int32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:config.RGB.blue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)
